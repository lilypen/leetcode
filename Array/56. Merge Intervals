/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        sort(intervals.begin(),intervals.end(),cmp);
        int i=0;
        vector<Interval> res={};
        while(i<intervals.size())
        {
            int s=i;
            int end=intervals[i].end;
            while(i<intervals.size()-1&&end >= intervals[i+1].start) 
            {
                end=max(end,intervals[i+1].end);
                i++;
            }
            res.push_back(Interval(intervals[s].start,end));
            i++;
        }
        return res;
    }
    static bool cmp(Interval a,Interval b)
    {
        if(a.start==b.start)
        return a.end<b.end;
        return a.start<b.start;
    }
};
